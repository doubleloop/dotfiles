##############################
#   Key Bindings
##############################

# Prefix key
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Toggle tmux (for nested sessions)
bind -T root F9 set prefix None \; set key-table off
bind -T off F9 set -u prefix \; set -u key-table

# Split pane
bind c new-window -c "#{pane_current_path}"
bind s split-window -c "#{pane_current_path}"
bind - split-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"

# Switch pane
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Pane navigation (vim-tmux-navigator support)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
bind -n 'M-\' if-shell "$is_vim" 'send-keys M-\\' "select-pane -l"
bind -n M-q display-panes

# Resize pane
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10
bind -n M-H resize-pane -L 10
bind -n M-J resize-pane -D 10
bind -n M-K resize-pane -U 10
bind -n M-L resize-pane -R 10
bind -n M-z resize-pane -Z

# Switch sessions
bind W choose-tree -s

# Switch window
bind -r C-p previous-window
bind -r C-n next-window
bind -n M-p previous-window
bind -n M-n next-window

# Synchronize all panes in a window
bind S setw synchronize-panes

# Set vi mode for copy mode
setw -g mode-keys vi

# More settings to make copy-mode more vim-like
bind -Tcopy-mode-vi v send -X begin-selection
bind [ copy-mode \; send 0

# Reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

##############################
#   Mouse Mode, clipboard
##############################

set -g mouse on

# Do not finish scroll mode after mouse button release!!!
unbind -Tcopy-mode-vi MouseDragEnd1Pane 

# Single MouseDown1 clears selection and sets new curret position
bind -Tcopy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection \; send -X stop-selection

# Clear selection when scroling, exit copy mode if in altenate
bind -Tcopy-mode-vi WheelDownPane if -Ft= '#{alternate_on}' 'send -X cancel' 'send -X clear-selection' \; send -N5 -X scroll-down
bind -Tcopy-mode-vi WheelUpPane   if -Ft= '#{alternate_on}' 'send -X cancel' 'send -X clear-selection' \; send -N5 -X scroll-up

# Handle wheel up/down scrolling (auto enter/exit copy mode, handle alternate mode)
# note: 'mouse_any_flag' means that running app is supposed to handle mouse by its own
bind -n WheelDownPane if -Ft= "#{mouse_any_flag}" \
    "send -M" \
    "if -Ft= '#{alternate_on}' 'send -N5 down' 'send -M'"
bind -n WheelUpPane if -Ft= "#{mouse_any_flag}" \
    "send -M" \
    "if -Ft= '#{alternate_on}' \
      'send -N5 up' \
      'if -Ft= \"#{pane_in_mode}\" \"send -M\" \"copy-mode -t= ; send -N5 -X scroll-up \"' "

# Requires xclip!!!
# todo: handle situation when xclip is not available

# Copy selection to primary
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'xclip -selection primary'
bind -Tcopy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe 'xclip -selection primary'
bind -Tcopy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe 'tr -d \\n | xclip -selection primary'
bind -n DoubleClick1Pane if -Ft= '#{mouse_any_flag}' 'send -M' 'copy-mode -t= ; select-pane ; send -X select-word ; send -X copy-pipe "xclip -selection primary"'
bind -n TripleClick1Pane if -Ft= '#{mouse_any_flag}' 'send -M' "copy-mode -t= ; select-pane ; send -X select-line ; send -X copy-pipe 'tr -d \\\\n | xclip -selection primary'"

# Middle click pastes current selection
bind -Tcopy-mode-vi MouseDown2Pane select-pane \; send -X cancel \; if -Ft= "#{mouse_any_flag}" \
    "send -M" \
    "run 'xclip -selection primary -o | tmux load-buffer - ; tmux paste-buffer'"
bind -n MouseDown2Pane select-pane \; if -Ft= "#{mouse_any_flag}" \
    "send -M" \
    "run 'xclip -selection primary -o | tmux load-buffer - ; tmux paste-buffer'"

# My own version of tmux-yank
bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "xclip -selection clipboard"
bind -Tcopy-mode-vi Y send -X copy-pipe-and-cancel "xclip -selection primary"
bind -Tcopy-mode-vi p    send -X copy-selection-and-cancel \; paste-buffer
bind -Tcopy-mode-vi "^]" send -X copy-selection-and-cancel \; paste-buffer
bind ] run "xclip -selection clipboard -o | tmux load-buffer - ; tmux paste-buffer"
bind P run "xclip -selection primary -o | tmux load-buffer - ; tmux paste-buffer"

##############################
#   Other Settings
##############################

# Having this on caused some strange issues
# (bunch of random text appearing in strange places after selecting/copying text in
# scroll mode)
set -g set-clipboard off

# automatically renumber tmux windows
set -g renumber-windows on

set -g word-separators " @\"'()|{}[]"

# Start pane & window index at 1
setw -g pane-base-index 1
set -g base-index 1

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

set -g history-limit 10000

# Display time of pane indicators
set -g display-panes-time 10000

# Highlight window when it has new activity
setw -g monitor-activity off
set -g visual-activity off

# Make delay shorter
set -g escape-time 10

set -g default-terminal "tmux-256color"
# set -g default-terminal "screen-256color"
set -ga terminal-overrides ",alacritty:RGB"
set -ga terminal-overrides ",xterm-256color:RGB"

setw -g automatic-rename off
setw -g allow-rename on

# for vim-gitgutter
set -g focus-events on

###############################
#   Coler scheme
###############################
set -g pane-border-style "fg=colour235"
set -g pane-active-border-style "fg=colour240"

# Messages in the command line
set -g message-style "fg=green,bg=colour0"

# Copy-mode selection
set -g mode-style "fg=default,bg=colour238"

# Status Bar
set -g status off
# Copeied from https://github.com/apaszke/dotfiles/blob/master/.tmux.conf
set -g status-interval 60
set -g status-justify centre
set -g status-style "fg=yellow,bg=black,dim"
setw -g window-status-style "fg=white,bg=black,dim"
setw -g window-status-current-style "fg=red,bg=black"

# Show session name, window & pane number, date and time on right side of
set -g status-right-length 70
set -g status-right "#[fg=blue]#S #I:#P #[fg=yellow]:: %d %b %Y #[fg=green]:: %R" # :: #(date -u | awk '{print $4}')::"
# Show host name and IP address on left side of status bar
set -g status-left-length 70
set -g status-left "#[fg=green]: #h : #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "

##############################
#   Plugins
##############################

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'Morantron/tmux-fingers'

set -g @fingers-key t
set -g @fingers-compact-hints 1
set -g @fingers-hint-format "#[fg=color160,bold]%s"
set -g @fingers-highlight-format "#[italics,bg=color238]%s"
set -g @fingers-copy-command 'tmux load-buffer - | tmux paste-buffer'
set -g @fingers-copy-command-uppercase 'xclip -selection clipboard'

# https://github.com/tmux-plugins/tpm/blob/master/docs/automatic_tpm_installation.md
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# To install from tmux hit prefix + I
# To install from command line run ~/.tmux/plugins/tpm/bin/install_plugins
run '~/.tmux/plugins/tpm/tpm'
