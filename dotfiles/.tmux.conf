##############################
#   Key Bindings
##############################

# prefix key
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Split pane
bind c new-window -c "#{pane_current_path}"
bind s split-window -c "#{pane_current_path}"
bind - split-window -c "#{pane_current_path}"
bind -n M-s split-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind -n M-v split-window -h -c "#{pane_current_path}"

# Switch pane
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n M-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -n M-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -n M-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -n M-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind -n M-q display-panes

# Resize pane
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10
bind -n M-H resize-pane -L 10
bind -n M-J resize-pane -D 10
bind -n M-K resize-pane -U 10
bind -n M-L resize-pane -R 10
bind -n M-z resize-pane -Z

# Switch window
bind -r C-p previous-window
bind -r C-n next-window
bind -n M-p previous-window
bind -n M-n next-window

# Synchronize all panes in a window
bind S setw synchronize-panes

# set vi mode for copy mode
setw -g mode-keys vi

# More settings to make copy-mode more vim-like
bind -Tcopy-mode-vi v send -X begin-selection
bind [ copy-mode \; send 0

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

##############################
#   Mouse Mode
##############################

set -g mouse on

# do not finish scroll mode after mouse button release!!!
# but copy to global clipboard
unbind -Tcopy-mode-vi MouseDragEnd1Pane 

# single MouseDown1 clears selection and sets new curret position
bind -Tcopy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection \; send -X stop-selection

# clear selection when scroling, exit copy mode if in altenate
bind -Tcopy-mode-vi WheelDownPane if -Ft= '#{alternate_on}' 'send -X cancel' 'send -X -t= clear-selection' \; send -N5 -X scroll-down
bind -Tcopy-mode-vi WheelUpPane   if -Ft= '#{alternate_on}' 'send -X cancel' 'send -X -t= clear-selection' \; send -N5 -X scroll-up
bind -Tcopy-mode-vi MouseDown3Pane send -X copy-selection-and-cancel \; paste-buffer

bind -n WheelDownPane \
  if -Ft= "#{mouse_any_flag}" \
    "send -M" \
    "if -Ft= '#{alternate_on}' 'send -N5 down' 'send -M'"

bind -n WheelUpPane \
  if -Ft= "#{mouse_any_flag}" \
    "send -M" \
    "if -Ft= '#{alternate_on}' \
      'send -N5 up' \
      'if -Ft= \"#{pane_in_mode}\" \"send -M\" \"copy-mode -et= ; send -N5 -X scroll-up \"' "

# copy selection to primary, requires xclip
# todo: check if xclip exists and disable if not
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'xclip -selection primary'
bind -Tcopy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe 'xclip -selection primary'
bind -Tcopy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe 'xclip -selection primary'
bind -n DoubleClick1Pane if -Ft= '#{mouse_any_flag}' 'send -M' 'copy-mode -et= ; select-pane ; send -X select-word ; send -X copy-pipe "xclip -selection primary"'
bind -n TripleClick1Pane if -Ft= '#{mouse_any_flag}' 'send -M' 'copy-mode -et= ; select-pane ; send -X select-line ; send -X copy-pipe "xclip -selection primary"'

##############################
#   Other Settings
##############################

# Having this on caused some strange issues
# (bunch of random text appearing in strange places after selecting/copying text in
# scroll mode)
set -g set-clipboard off

# automatically renumber tmux windows
set -g renumber-windows on

set -g word-separators " @\"'"

# Start pane & window index at 1
setw -g pane-base-index 1
set -g base-index 1

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

set -g history-limit 10000

# Display time of pane indicators
set -g display-panes-time 10000

# Highlight window when it has new activity
setw -g monitor-activity on
set -g visual-activity on

# Make delay shorter
set -sg escape-time 0

set -g default-terminal "tmux-256color"
# set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

set -g status-interval 5
set -g allow-rename off
# turn status off by default
set -g status off

##############################
#   Plugins
##############################

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'christoomey/vim-tmux-navigator'

# https://github.com/tmux-plugins/tpm/blob/master/docs/automatic_tpm_installation.md
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# to install from tmux hit prefix + I
# to install from command line run ~/.tmux/plugins/tpm/bin/install_plugins
run '~/.tmux/plugins/tpm/tpm'

# https://github.com/neovim/neovim/wiki/FAQ#cursor-shape-doesnt-change-in-tmux
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

###############################
##   coler scheme
###############################
set-option -g pane-border-fg colour235 #base02
set-option -g pane-active-border-fg colour240 #base01

# colorise messages in the command line
set-option -g message-fg brightred
set-option -g message-bg colour235  #black

# Status Bar
set -g status-interval 60              # set update frequencey (default 15 seconds)
set -g status-justify centre           # center window list for clarity
# set-option -g status-position top    # position the status bar at top of screen
# set color for status bar
set-option -g status-fg yellow
set-option -g status-bg colour235 #black
set-option -g status-attr dim

# set window list colors - red for active and cyan for inactive
set-window-option -g window-status-fg white
set-window-option -g window-status-bg colour235 #black
set-window-option -g window-status-attr dim

set-window-option -g window-status-current-fg red
set-window-option -g window-status-current-bg colour235 #black
# set-window-option -g window-status-current-attr bright

# show session name, window & pane number, date and time on right side of
# status bar
set -g status-right-length 70
set -g status-right "#[fg=blue]#S #I:#P #[fg=yellow]:: %d %b %Y #[fg=green]:: %R" # :: #(date -u | awk '{print $4}')::"

# show host name and IP address on left side of status bar
set -g status-left-length 70
set -g status-left "#[fg=green]: #h : #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "
#istats | awk 'BEGIN{scan=0; max=0; bat=0} /Current charge/{bat=$5} /--- Extra Stats ---/{scan=1} {if (scan) { for(i=1; i<=NF; i++) { if(match($i, /[0-9\.]°C/)) {sub("°C", "", $i); if (max < $i) max = $i} }}} END{printf("%.1f°C %s\n", max, bat)}'
#set -g status-left " #[fg=green]: #h : #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #[fg=colour253]: #(istats | awk 'BEGIN{scan=0; max=0; bat=0} /Current charge/{bat=$5} /--- Extra Stats ---/{scan=1} {if (scan) { for(i=1; i<=NF; i++) { if(index(\$i, \"°C\")) {sub(\"°C\", \"\", \$i); if (max < \$i) max = \$i } } } } END{printf(\"%%.1f°C %%s\", max, bat)}')"
